package systemy.bankowe.services.user;

import systemy.bankowe.dto.UserDto;
import systemy.bankowe.dto.deposit.DepositDto;

/**
 * UsÅ‚ugi zwiÄ…zane z uÅ¼ytkownikiem.
 * 
 * @author Adam Kopaczewski
 *
 * Copyright Â© 2015 Adam Kopaczewski
 */
public interface IUserService {
    /**
     * WyszukujÄ™ uzytkownika na podstawie jego nazwy.
     * 
     * @param username nazwa uÅ¼ytkownika.
     * @throws NoSuchUserException wystÄ™puje gdy brak uÅ¼ytkownika o zadanej nazwie.
     */
    UserData loadUserByLogin(final String username) throws NoSuchUserException;
    /**
     * Zeruje liczbÄ™ nieudanych logowaÅ„.
     * 
     * @param userData dane uÅ¼ytkownika.
     */
    void resetFailAttempts(final UserData userData);
    /**
     * ZwiÄ™ksza lizbÄ™ nieudanych logowaÅ„.
     * 
     * @param userData dane uÅ¼ytkownika.
     */
    void incrementFailAttempts(final UserData userData);
    /**
     * Dodaje kolejne konto dla zalogowanego uÅ¼ytkownika.
     * 
     * @param accountName nazwa konta.
     * @return true - konto zostaÅ‚o dodane; false - wystÄ…piÅ‚y bÅ‚edy podczas prÃ³by dodania konta.
     */
    boolean addNextAccount(String accountName);
    /**
     * Zamyka Å¼Ä…dany rachunek.
     * 
     * @param accountNumber numer rachunku do zamkniÄ™cia.
     */
    void closeAccount(final String accountNumber);
    /**
     * Dodaje kolejn¹ lokatê dla zalogowanego u¿ytkownika.
     * 
     * @param deposit lokata.
     * @return true - lokata zosta³a dodana; false - wyst¹pi³ b³¹d podczas zaka³adania lokaty.
     */
    boolean addNextDeposit(DepositDto deposit);
    /**
     * Zwraca aktualnie zalogowanego u¿ytkownika
     */
    UserDto getLoggedAccount();
}